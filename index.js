const fs = require("fs");
const prettier = require("prettier");

let isNotThefirstTimeRunning = false;

const pathMaker = () => {
  const pages = fs.readdirSync("./src/pages");

  const readFile = (file = "") =>
    file
      .match(/(@(name|icon):( |).*[^{}\[\]-_=\/\\\(\)\*&^%$#@!~`|?><,;:"'])/g)
      ?.map((enums) => enums.split(":")[1].trim());

  const readComponentName = (file) => {
    if (file) {
      const matches = file.match(/(export default .*)\w/g) || [];
      if (matches.length) {
        const name = matches[0].split("default")[1];
        return name.trim();
      }
    }
  };

  const makeRoute = (filename) => {
    if (!filename.includes(".")) return;
    const filepath = "./src/pages/" + filename;
    const file = String(fs.readFileSync(filepath));
    const [name, icon] = readFile(file) || [null, null];
    const component = readComponentName(file);
    if (!component) return;
    const oj = {
      path: filename.includes("index") ? "/" : "/" + filename.split(".")[0],
      filepath: "/" + filename,
      component: component ?? "",
    };
    if (name) oj.name = name;
    if (icon) oj.icon = icon;
    return oj;
  };

  const routes = pages.map((file, index) => makeRoute(file, index));
  const _config = `// WARNING: !!! THIS FILE IS AUTOMATICALLY GENERATED AND IS NOT TO BE TOUCHED !!! \n \n export const routes = ${JSON.stringify(
    routes
  )}`;

  const _routes = `// WARNING: !!! THIS FILE IS AUTOMATICALLY GENERATED AND IS NOT TO BE TOUCHED !!! \n \n  ${routes
    .map((node) =>
      node?.component
        ? `import ${node.component} from "src/pages${
            node.filepath.split(".")[0]
          }";`
        : ""
    )
    .join("")} \n \n export{${routes
    .map((node) => (node?.component ? `${node.component},` : ""))
    .join("")}};`;

  fs.writeFileSync(
    "./src/config/_config.ts",
    prettier.format(_config, { semi: false, parser: "babel" }),
    (err) => {
      if (err) return console.error(err);
    }
  );

  fs.writeFileSync(
    "./src/config/_routes.ts",
    prettier.format(_routes, { semi: false, parser: "babel" }),
    (err) => {
      if (err) return console.error(err);
    }
  );
};

if (!isNotThefirstTimeRunning) {
  pathMaker();
  isNotThefirstTimeRunning = true;
}

let fsWait = false;
fs.watch("./src/pages", (event, filename) => {
  if (filename) {
    if (fsWait) return;
    fsWait = setTimeout(() => {
      fsWait = false;
    }, 100);
    console.log(`${filename} file Changed`);
    pathMaker();
  }
});

module.exports = pathMaker;
